using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Maverick.Azure.ApplicationInsightsManager.Helper
{
    public class FileHelper
    {
        /// <summary>
        /// Encodes the Web Resource File
        /// </summary>
        /// <returns></returns>
        static public string GetEncodedFileContents(string instrumentationKey, string githubLocation)
        {
            var scriptString = @"
                /****************************** Module Header ******************************\
                This code is auto-generated by XrmToolbox plugin 'Application Insights Manager'

                Project Source:   " + githubLocation + @" 

                THIS CODE AND INFORMATION IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND,
                EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
                WARRANTIES OF MERCHANTABILITY AND/ OR FITNESS FOR A PARTICULAR PURPOSE.
                \***************************************************************************/

                var userName;
                var userDomainName;
                var clientUrl;

                var formContext;

                function Getinfo() {
                    var UserID;
                    var selectFields = ""$select = DomainName,FullName"";

                    var globalContext = Xrm.Utility.getGlobalContext();
                            var userSettings = Xrm.Utility.getGlobalContext().userSettings;

                            clientUrl = globalContext.getClientUrl();
                            UserID = userSettings.userId;

                            var req = new XMLHttpRequest();
                            req.open(""GET"", globalContext.getClientUrl() + ""/api/data/v8.2/systemusers("" + UserID + "")?"" + selectFields, false);
                            req.setRequestHeader(""OData-MaxVersion"", ""4.0"");
                            req.setRequestHeader(""OData-Version"", ""4.0"");
                            req.setRequestHeader(""Accept"", ""application/json"");
                            req.setRequestHeader(""Content-Type"", ""application/json; charset=utf-8"");
                            req.setRequestHeader(""Prefer"", ""odata.include-annotations=\""*\"""");
                            req.onreadystatechange = function() {
                                if (this.readyState === 4)
                                {
                                    req.onreadystatechange = null;
                                    if (this.status === 200)
                                    {
                                        var result = JSON.parse(this.response);
                                        userDomainName = result[""domainname""];
                                        userName = result[""fullname""];
                                    }
                                    else
                                    {
                                        Xrm.Utility.alertDialog(this.statusText);
                                    }
                                }
                            };
                            req.send();
                        }

                        function captureTelemetry()
                        {
                            var appInsights = window.appInsights || function(config) {
                                function s(config)
                                {
                                    t[config] = function() {
                                        var i = arguments; t.queue.push(function() {
                                            t[config].apply(t, i);
                                        });
                            };
                        }

                        var t = { config: config }, r = document, f = window, e = ""script"", o = r.createElement(e), i, u;
                        for (o.src = config.url || ""//az416426.vo.msecnd.net/scripts/a/ai.0.js"", r.getElementsByTagName(e)[0].parentNode.appendChild(o), t.cookie = r.cookie, t.queue = [], i = [""Event"", ""Exception"", ""Metric"", ""PageView"", ""Trace""]; i.length;)
                            s(""track"" + i.pop());

                        return config.disableExceptionTracking || (i = ""onerror"", s(""_"" + i), u = f[i], f[i] = function(config, r, f, e, o)
                        {
                            var s = u && u(config, r, f, e, o);
                            return s !== !0 && t[""_"" + i](config, r, f, e, o), s;
                        }), t;
                    }
                    ({
                        instrumentationKey: " + instrumentationKey +
                    @"});

                    window.appInsights = appInsights;
                    appInsights.trackPageView(formContext.data.entity.getEntityName(), clientUrl, { User: userName, DomainName: userDomainName });
                }

                function LoadTelemetry(executionContext)
                {
                    formContext = executionContext.getFormContext();

                    Getinfo();
                    captureTelemetry();
                }
            ";

            return Base64Encode(scriptString);
        }

        private static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }
    }
}
